{"changed":true,"filter":false,"title":"directives.js","tooltip":"/client/css/directives.js","value":"/**\n * DIRECTIVES\n *\n * Miscellaneous directives go in this file.\n */\n\nvar module = angular.module('directives', ['popup']);\n\n/**\n * Inline edit\n */\nmodule.directive('inlineEdit', function() {\n  var previewTemplate = '<span ng-hide=\"mode\">{{model}}</span>';\n  var editTemplate = '<input ng-show=\"mode\" ng-model=\"model\" />';\n\n  return {\n    restrict: 'E',\n    scope: {\n      model: '=',\n      mode: '='\n    },\n    template: previewTemplate + editTemplate\n  };\n});\n\n/**\n * Group of validation errors for a form field.\n *\n * @example\n *   <input name=send_destination ng-model=recipient>\n *   <div rp-errors=send_destination>\n *     <div rp-error-on=required>This field is required.</div>\n *     <div rp-error-valid>{{recipient}} is a valid destination.</div>\n *   </div>\n */\nvar RP_ERRORS = 'rp-errors';\nmodule.directive('rpErrors', [function() {\n  return {\n    restrict: 'EA',\n    compile: function(el, attr, linker) {\n      var fieldName = attr.rpErrors || attr.on,\n        errs = {};\n\n      el.data(RP_ERRORS, errs);\n      return function(scope, el) {\n        var formController = el.inheritedData('$formController');\n        var formName = formController.$name,\n          selectedTransclude,\n          selectedElement,\n          selectedScope;\n\n        function updateErrorTransclude() {\n          var field = formController[fieldName];\n\n          if (!field) return;\n\n          var $error = field && field.$error;\n\n          if (selectedElement) {\n            selectedScope.$destroy();\n            selectedElement.remove();\n            selectedElement = selectedScope = null;\n          }\n\n          // Pristine fields should show neither success nor failure messages\n          if (field.$pristine) return;\n\n          // Find any error messages defined for current errors\n          selectedTransclude = false;\n          $.each(errs, function(validator, transclude) {\n            if (validator.length <= 1) return;\n            if ($error && $error[validator.slice(1)]) {\n              selectedTransclude = transclude;\n              return false;\n            }\n          });\n\n          // Show message for valid fields\n          if (!selectedTransclude && errs['+'] && field.$valid) {\n            selectedTransclude = errs['+'];\n          }\n\n          // Generic message for invalid fields when there is no specific msg\n          if (!selectedTransclude && errs['?'] && field.$invalid) {\n            selectedTransclude = errs['?'];\n          }\n\n          if (selectedTransclude) {\n            scope.$eval(attr.change);\n            selectedScope = scope.$new();\n            selectedTransclude(selectedScope, function(errElement) {\n              selectedElement = errElement;\n              el.append(errElement);\n            });\n          }\n        }\n\n        scope.$watch(formName + '.' + fieldName + '.$error', updateErrorTransclude, true);\n        scope.$watch(formName + '.' + fieldName + '.$pristine', updateErrorTransclude);\n      };\n    }\n  };\n}]);\n\n/**\n * Error message for validator failure.\n *\n * Use this directive within a rp-errors block to show a message for a specific\n * validation failing.\n *\n * @example\n *   <div rp-errors=send_destination>\n *     <div rp-error-on=required>This field is required.</div>\n *   </div>\n */\nmodule.directive('rpErrorOn', [function() {\n  return {\n    transclude: 'element',\n    priority: 500,\n    compile: function(element, attrs, transclude) {\n      var errs = element.inheritedData(RP_ERRORS);\n      if (!errs) return;\n      errs['!' + attrs.rpErrorOn] = transclude;\n    }\n  };\n}]);\n\n/**\n * Message for no matched validator failures.\n *\n * Use this directive within a rp-errors block to show a message if the field is\n * invalid, but there was no error message defined for any of the failing\n * validators.\n *\n * @example\n *   <div rp-errors=send_destination>\n *     <div rp-error-on=required>This field is required.</div>\n *     <div rp-error-unknown>Invalid value.</div>\n *   </div>\n */\nmodule.directive('rpErrorUnknown', [function() {\n  return {\n    transclude: 'element',\n    priority: 500,\n    compile: function(element, attrs, transclude) {\n      var errs = element.inheritedData(RP_ERRORS);\n      if (!errs) return;\n      errs['?'] = transclude;\n    }\n  };\n}]);\n\n/**\n * Message for field valid.\n *\n * Use this directive within a rp-errors block to show a message if the field is\n * valid.\n */\nmodule.directive('rpErrorValid', [function() {\n  return {\n    transclude: 'element',\n    priority: 500,\n    compile: function(element, attrs, transclude) {\n      var errs = element.inheritedData(RP_ERRORS);\n      if (!errs) return;\n      errs['+'] = transclude;\n    }\n  };\n}]);\n\nmodule.directive('rpConfirm', ['rpPopup', function(popup) {\n  return {\n    restrict: 'E',\n    link: function postLink(scope, element, attrs) {\n      // Could have custom or bootstrap modal options here\n      var popupOptions = {};\n      element.find('a,button').click(function(e) {\n        e.preventDefault();\n\n        popup.confirm(attrs[\"title\"], attrs[\"actionText\"],\n          attrs[\"actionButtonText\"], attrs[\"actionFunction\"], attrs[\"actionButtonCss\"],\n          attrs[\"cancelButtonText\"], attrs[\"cancelFunction\"], attrs[\"cancelButtonCss\"],\n          scope, popupOptions);\n      });\n    }\n  };\n}]);\n\nmodule.directive('rpPopup', ['rpPopup', '$parse', function(popup, $parse) {\n  return {\n    restrict: 'E',\n    link: function postLink(scope, element, attrs) {\n      var a = element.find('a[rp-popup-link]');\n      a.click(function(e) {\n        e.preventDefault();\n\n        // onShow action\n        if (attrs.rpPopupOnOpen) {\n          $parse(attrs.rpPopupOnOpen)(scope); \n        }\n\n        var content = element.find('[rp-popup-content]');\n        xml = new XMLSerializer().serializeToString(content[0]);\n\n        popup.blank(xml, scope);\n        if (attrs.onopen && scope[attrs.onopen]) {\n          scope[attrs.onopen]();\n        }\n      });\n    }\n  };\n}]);\n\n// TODO Make it have different styling for different limits\nmodule.directive('rpInboundBridgeLimit', [function(){\n  return {\n    restrict: 'E',\n    scope: {\n      limit: '='\n    },\n    template: '<span> {{limit}} BTC </span>',\n    compile: function(element, attrs) {\n      element.addClass('test');\n    }\n  };\n}]);\n\n/*\n * Adds download functionality to an element.\n */\nmodule.directive('rpDownload', [function() {\n  return {\n    restrict: 'A',\n    scope: {\n      data: '=rpDownload',\n      filename: '@rpDownloadFilename',\n      isCsv: '@rpDownloadCsv',\n      clickHandler: '@ngClick'\n    },\n    compile: function(element, attr, linker) {\n      return function(scope, element, attr) {\n        var trigger = element.find('[rp-download-trigger]');\n        if (!trigger.length) trigger = element;\n\n        if (\"download\" in document.createElement(\"a\")) {\n          scope.$watch('data', function(data) {\n            if (scope.isCsv) trigger.attr('href', data ? \"data:text/csv;charset=utf-8,\" + escape(data) : \"\");\n            else trigger.attr('href', \"data:text/plain,\" + data);\n          });\n          scope.$watch('filename', function(filename) {\n            trigger.attr('download', filename);\n          });\n        } else if (swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n          element.css('position', 'relative');\n\n          setImmediate(function() {\n            var width = trigger.innerWidth();\n            var height = trigger.innerHeight();\n            var offsetTrigger = trigger.offset();\n            var offsetElement = element.offset();\n            var topOffset = offsetTrigger.top - offsetElement.top;\n            var leftOffset = offsetTrigger.left - offsetElement.left;\n            var dl = Downloadify.create(element[0], {\n              filename: function() {\n                return scope.filename;\n              },\n              data: function() {\n                // If there was a click handler in the element Downloadify hides, then trigger it now\n                if (scope.clickHandler) trigger.trigger('click');\n                return scope.data;\n              },\n              transparent: true,\n              swf: 'swf/downloadify.swf',\n              downloadImage: 'img/transparent_l.gif',\n              width: width,\n              height: height,\n              append: true\n            });\n\n            var id = dl.flashContainer.id;\n            $('#' + id).css({\n              position: 'absolute',\n              top: topOffset + 'px',\n              left: leftOffset + 'px'\n            });\n          });\n        } else {\n          // XXX Should provide some alternative or error\n        }\n      };\n    }\n  };\n}]);\n\n/**\n * Tooltips\n */\nmodule.directive('rpTooltip', [function() {\n  return function(scope, element, attr) {\n    attr.$observe('rpTooltip', function(value) {\n      // Title\n      var options = {'title': value};\n\n      // Placement\n      if (attr.rpTooltipPlacement)\n        options.placement = attr.rpTooltipPlacement;\n\n      $(element).tooltip('destroy');\n      $(element).tooltip(options);\n    });\n  };\n}]);\n\n/**\n * Popovers\n */\nmodule.directive('rpPopover', [function() {\n  return function(scope, element, attr) {\n    if (!attr.rpPopoverTrigger) attr.rpPopoverTrigger = 'click';\n\n    $(element).popover({\n      html: true,\n      placement: attr.rpPopoverPlacement,\n      title: attr.rpPopoverTitle,\n      trigger: attr.rpPopoverTrigger\n      // TODO also use rpPopoverContent attribute (there's a bug with this)\n    });\n\n    $('html').click(function() {\n      $(element).popover('hide');\n    });\n\n    $(element).click(function(event){\n      event.stopPropagation();\n    });\n  };\n}]);\n\nmodule.directive('rpAutofill', ['$parse', function($parse) {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    link: function($scope, element, attr, ctrl) {\n      if (!ctrl) return;\n\n      $scope.$watch(attr.rpAutofill, function(value) {\n        if (value) {\n          // Normalize amount\n          if (attr.rpAutofillAmount || attr.rpAutofillCurrency) {\n            // 1 XRP will be interpreted as 1 XRP, not 1 base unit\n            if (value === (\"\" + parseInt(value, 10))) {\n              value = value + '.0';\n            }\n\n            var amount = ripple.Amount.from_json(value);\n            if (!amount.is_valid()) return;\n            if (attr.rpAutofillAmount) {\n              value = +amount.to_human({\n                group_sep: false\n              });\n            } else {\n              value = amount.currency().to_json();\n            }\n          }\n\n          element.val(value);\n          ctrl.$setViewValue(value);\n          $scope.$eval(attr.rpAutofillOn);\n        }\n      }, true);\n    }\n  };\n}]);\n\nmodule.directive('rpSelectEl', [function() {\n  return {\n    restrict: 'A',\n    scope: {\n      target: '@rpSelectEl'\n    },\n    link: function($scope, element, attr) {\n      element.click(function() {\n        var doc = document;\n        var text = doc.getElementById($scope.target);\n\n        if (doc.body.createTextRange) { // ms\n          var range = doc.body.createTextRange();\n          range.moveToElementText(text);\n          range.select();\n        } else if (window.getSelection) { // moz, opera, webkit\n          var selection = window.getSelection();\n          var srange = doc.createRange();\n          srange.selectNodeContents(text);\n          selection.removeAllRanges();\n          selection.addRange(srange);\n        }\n      });\n    }\n  };\n}]);\n\nmodule.directive('rpNoPropagate', [function() {\n  return {\n    restrict: 'A',\n    link: function($scope, element, attr) {\n      element.click(function(e) {\n        e.stopPropagation();\n      });\n    }\n  };\n}]);\n\n/**\n * Spinner\n */\nmodule.directive('rpSpinner', [function() {\n  return {\n    restrict: 'A',\n    link: function(scope, element, attr) {\n      var spinner = null;\n      attr.$observe('rpSpinner', function(value) {\n        element.removeClass('spinner');\n        if (spinner) {\n          spinner.stop();\n          spinner = null;\n        }\n\n        if (value > 0) {\n          spinner = new Spinner({\n            lines: 9, // The number of lines to draw\n            length: 3, // The length of each line\n            width: 2, // The line thickness\n            radius: value, // The radius of the inner circle\n            className: 'spinnerInner'\n          });\n\n          // Spinner for input field\n          if (element.is('input')) {\n            element.after('<div class=\"inputSpinner\"></div>');\n            spinner.spin(element.parent().find('.inputSpinner')[0]);\n          }\n\n          // Spinner for everything else\n          else {\n            element.addClass('spinner');\n            spinner.spin(element[0]);\n          }\n        }\n      });\n    }\n  };\n}]);\n\n\n// Version 0.2.0\n// AngularJS simple file upload directive\n// this directive uses an iframe as a target\n// to enable the uploading of files without\n// losing focus in the ng-app.\n//\n// <div ng-app=\"app\">\n//   <div ng-controller=\"mainCtrl\">\n//    <form action=\"/uploads\" ng-upload=\"results()\">\n//      <input type=\"file\" name=\"avatar\"></input>\n//      <input type=\"submit\" value=\"Upload\"></input>\n//    </form>\n//  </div>\n// </div>\n//\n//  angular.module('app', ['ngUpload'])\n//    .controller('mainCtrl', function($scope) {\n//      $scope.results = function(content) {\n//        console.log(content);\n//      }\n//  });\n//\n//\nmodule.directive('ngUpload', function() {\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n\n      // Options (just 1 for now)\n      // Each option should be prefixed with 'upload-Options-' or 'uploadOptions'\n      // {\n      //    // specify whether to enable the submit button when uploading forms\n      //    enableControls: bool\n      // }\n      var options = {};\n      options.enableControls = attrs['uploadOptionsEnableControls'];\n\n      // get scope function to execute on successful form upload\n      if (attrs['ngUpload']) {\n\n        element.attr(\"target\", \"upload_iframe\");\n        element.attr(\"method\", \"post\");\n\n        // Append a timestamp field to the url to prevent browser caching results\n        element.attr(\"action\", element.attr(\"action\") + \"?_t=\" + new Date().getTime());\n\n        element.attr(\"enctype\", \"multipart/form-data\");\n        element.attr(\"encoding\", \"multipart/form-data\");\n\n        // Retrieve the callback function\n        var fn = attrs['ngUpload'].split('(')[0];\n        var callbackFn = scope.$eval(fn);\n        if (callbackFn === null || callbackFn === undefined || !angular.isFunction(callbackFn)) {\n          var message = \"The expression on the ngUpload directive does not point to a valid function.\";\n          // console.error(message);\n          throw message + \"\\n\";\n        }\n\n        // Helper function to create new iframe for each form submission\n        var addNewDisposableIframe = function(submitControl) {\n          // create a new iframe\n          var iframe = $(\"<iframe id='upload_iframe' name='upload_iframe' border='0' width='0' height='0' style='width: 0px; height: 0px; border: none; display: none' />\");\n\n          // attach function to load event of the iframe\n          iframe.bind('load', function() {\n\n            // get content - requires jQuery\n            var content = iframe.contents().find('body').text();\n\n            // execute the upload response function in the active scope\n            scope.$apply(function() {\n              callbackFn(content, content !== \"\" /* upload completed */ );\n            });\n\n            // remove iframe\n            if (content !== \"\") // Fixes a bug in Google Chrome that dispose the iframe before content is ready.\n            setTimeout(function() {\n              iframe.remove();\n            }, 250);\n\n            //if (options.enableControls == null || !(options.enableControls.length >= 0))\n            submitControl.attr('disabled', null);\n            submitControl.attr('title', 'Click to start upload.');\n          });\n\n          // add the new iframe to application\n          element.parent().append(iframe);\n        };\n\n        // 1) get the upload submit control(s) on the form (submitters must be decorated with the 'ng-upload-submit' class)\n        // 2) attach a handler to the controls' click event\n        $('.upload-submit', element).click(\n\n        function() {\n\n          addNewDisposableIframe($(this) /* pass the submit control */ );\n\n          scope.$apply(function() {\n            callbackFn(\"Please wait...\", false /* upload not completed */ );\n          });\n\n          //console.log(angular.toJson(options));\n\n          var enabled = true;\n          if (options.enableControls === null || options.enableControls === undefined || options.enableControls.length >= 0) {\n            // disable the submit control on click\n            $(this).attr('disabled', 'disabled');\n            enabled = false;\n          }\n\n          $(this).attr('title', (enabled ? '[ENABLED]: ' : '[DISABLED]: ') + 'Uploading, please wait...');\n\n          // submit the form\n          $(element).submit();\n        }).attr('title', 'Click to start upload.');\n      } else console.log(\"No callback function found on the ngUpload directive.\");\n    }\n  };\n});\n\n/**\n * Focus element on render\n */\nmodule.directive('rpFocus', ['$timeout', function($timeout) {\n  return function($scope, element) {\n    $timeout(function(){\n      $scope.$watch(function () {return element.is(':visible')}, function(newValue) {\n        if (newValue === true)\n          element.focus();\n      })\n    })\n  }\n}]);\n\nmodule.directive('rpOffCanvasMenu', function() {\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      element.find('h2').click(function () {\n        element.parent().toggleClass('off-canvas-nav-expand');\n      });\n    }\n  };\n});\n\nmodule.directive('rpSnapper', ['rpId', function($id) {\n  return function($scope) {\n    // Initialize snapper only if user is logged in.\n    var watcher = $scope.$watch(function(){return $id.loginStatus}, function(){\n      var snapper;\n\n      if ($id.loginStatus) {\n        setImmediate(function(){\n          snapper = new Snap({\n            element: document.getElementById('wrapper'),\n            disable: 'right'\n          });\n\n          // Check\n          checkSize();\n\n          // Snapper toggle button\n          $('.snapper-toggle').click(function(){\n            snapper.state().state == 'closed' ? snapper.open('left') : snapper.close()\n          });\n\n          $('.mobile-nav').find('a').click(function(){\n            snapper.close();\n          });\n        });\n\n        // Activate if resized to mobile size\n        $(window).resize(function(){\n          checkSize();\n        });\n\n        var checkSize = function(){\n          // screen-xs-max\n          if ('object' === typeof snapper) {\n            if ($(window).width() > 767) {\n              snapper.close();\n              snapper.disable();\n            } else {\n              $('.mobile-nav').show();\n              snapper.enable();\n            }\n          }\n        };\n\n        // Remove watcher\n        watcher();\n      }\n    });\n  }\n}]);\n\n/**\n * Adds spacing around span tags.\n */\nmodule.directive('rpSpanSpacing', [function () {\n  return {\n    restrict: 'EA',\n    compile: function (element, attr, linker) {\n      element.find('> span').before(' ').after(' ');\n    }\n  };\n}]);\n","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":3}},"text":"/**"},{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":661,"column":0}},"lines":[" * DIRECTIVES"," *"," * Miscellaneous directives go in this file."," */","","var module = angular.module('directives', ['popup']);","","/**"," * Inline edit"," */","module.directive('inlineEdit', function() {","  var previewTemplate = '<span ng-hide=\"mode\">{{model}}</span>';","  var editTemplate = '<input ng-show=\"mode\" ng-model=\"model\" />';","","  return {","    restrict: 'E',","    scope: {","      model: '=',","      mode: '='","    },","    template: previewTemplate + editTemplate","  };","});","","/**"," * Group of validation errors for a form field."," *"," * @example"," *   <input name=send_destination ng-model=recipient>"," *   <div rp-errors=send_destination>"," *     <div rp-error-on=required>This field is required.</div>"," *     <div rp-error-valid>{{recipient}} is a valid destination.</div>"," *   </div>"," */","var RP_ERRORS = 'rp-errors';","module.directive('rpErrors', [function() {","  return {","    restrict: 'EA',","    compile: function(el, attr, linker) {","      var fieldName = attr.rpErrors || attr.on,","        errs = {};","","      el.data(RP_ERRORS, errs);","      return function(scope, el) {","        var formController = el.inheritedData('$formController');","        var formName = formController.$name,","          selectedTransclude,","          selectedElement,","          selectedScope;","","        function updateErrorTransclude() {","          var field = formController[fieldName];","","          if (!field) return;","","          var $error = field && field.$error;","","          if (selectedElement) {","            selectedScope.$destroy();","            selectedElement.remove();","            selectedElement = selectedScope = null;","          }","","          // Pristine fields should show neither success nor failure messages","          if (field.$pristine) return;","","          // Find any error messages defined for current errors","          selectedTransclude = false;","          $.each(errs, function(validator, transclude) {","            if (validator.length <= 1) return;","            if ($error && $error[validator.slice(1)]) {","              selectedTransclude = transclude;","              return false;","            }","          });","","          // Show message for valid fields","          if (!selectedTransclude && errs['+'] && field.$valid) {","            selectedTransclude = errs['+'];","          }","","          // Generic message for invalid fields when there is no specific msg","          if (!selectedTransclude && errs['?'] && field.$invalid) {","            selectedTransclude = errs['?'];","          }","","          if (selectedTransclude) {","            scope.$eval(attr.change);","            selectedScope = scope.$new();","            selectedTransclude(selectedScope, function(errElement) {","              selectedElement = errElement;","              el.append(errElement);","            });","          }","        }","","        scope.$watch(formName + '.' + fieldName + '.$error', updateErrorTransclude, true);","        scope.$watch(formName + '.' + fieldName + '.$pristine', updateErrorTransclude);","      };","    }","  };","}]);","","/**"," * Error message for validator failure."," *"," * Use this directive within a rp-errors block to show a message for a specific"," * validation failing."," *"," * @example"," *   <div rp-errors=send_destination>"," *     <div rp-error-on=required>This field is required.</div>"," *   </div>"," */","module.directive('rpErrorOn', [function() {","  return {","    transclude: 'element',","    priority: 500,","    compile: function(element, attrs, transclude) {","      var errs = element.inheritedData(RP_ERRORS);","      if (!errs) return;","      errs['!' + attrs.rpErrorOn] = transclude;","    }","  };","}]);","","/**"," * Message for no matched validator failures."," *"," * Use this directive within a rp-errors block to show a message if the field is"," * invalid, but there was no error message defined for any of the failing"," * validators."," *"," * @example"," *   <div rp-errors=send_destination>"," *     <div rp-error-on=required>This field is required.</div>"," *     <div rp-error-unknown>Invalid value.</div>"," *   </div>"," */","module.directive('rpErrorUnknown', [function() {","  return {","    transclude: 'element',","    priority: 500,","    compile: function(element, attrs, transclude) {","      var errs = element.inheritedData(RP_ERRORS);","      if (!errs) return;","      errs['?'] = transclude;","    }","  };","}]);","","/**"," * Message for field valid."," *"," * Use this directive within a rp-errors block to show a message if the field is"," * valid."," */","module.directive('rpErrorValid', [function() {","  return {","    transclude: 'element',","    priority: 500,","    compile: function(element, attrs, transclude) {","      var errs = element.inheritedData(RP_ERRORS);","      if (!errs) return;","      errs['+'] = transclude;","    }","  };","}]);","","module.directive('rpConfirm', ['rpPopup', function(popup) {","  return {","    restrict: 'E',","    link: function postLink(scope, element, attrs) {","      // Could have custom or bootstrap modal options here","      var popupOptions = {};","      element.find('a,button').click(function(e) {","        e.preventDefault();","","        popup.confirm(attrs[\"title\"], attrs[\"actionText\"],","          attrs[\"actionButtonText\"], attrs[\"actionFunction\"], attrs[\"actionButtonCss\"],","          attrs[\"cancelButtonText\"], attrs[\"cancelFunction\"], attrs[\"cancelButtonCss\"],","          scope, popupOptions);","      });","    }","  };","}]);","","module.directive('rpPopup', ['rpPopup', '$parse', function(popup, $parse) {","  return {","    restrict: 'E',","    link: function postLink(scope, element, attrs) {","      var a = element.find('a[rp-popup-link]');","      a.click(function(e) {","        e.preventDefault();","","        // onShow action","        if (attrs.rpPopupOnOpen) {","          $parse(attrs.rpPopupOnOpen)(scope); ","        }","","        var content = element.find('[rp-popup-content]');","        xml = new XMLSerializer().serializeToString(content[0]);","","        popup.blank(xml, scope);","        if (attrs.onopen && scope[attrs.onopen]) {","          scope[attrs.onopen]();","        }","      });","    }","  };","}]);","","// TODO Make it have different styling for different limits","module.directive('rpInboundBridgeLimit', [function(){","  return {","    restrict: 'E',","    scope: {","      limit: '='","    },","    template: '<span> {{limit}} BTC </span>',","    compile: function(element, attrs) {","      element.addClass('test');","    }","  };","}]);","","/*"," * Adds download functionality to an element."," */","module.directive('rpDownload', [function() {","  return {","    restrict: 'A',","    scope: {","      data: '=rpDownload',","      filename: '@rpDownloadFilename',","      isCsv: '@rpDownloadCsv',","      clickHandler: '@ngClick'","    },","    compile: function(element, attr, linker) {","      return function(scope, element, attr) {","        var trigger = element.find('[rp-download-trigger]');","        if (!trigger.length) trigger = element;","","        if (\"download\" in document.createElement(\"a\")) {","          scope.$watch('data', function(data) {","            if (scope.isCsv) trigger.attr('href', data ? \"data:text/csv;charset=utf-8,\" + escape(data) : \"\");","            else trigger.attr('href', \"data:text/plain,\" + data);","          });","          scope.$watch('filename', function(filename) {","            trigger.attr('download', filename);","          });","        } else if (swfobject.hasFlashPlayerVersion(\"10.0.0\")) {","          element.css('position', 'relative');","","          setImmediate(function() {","            var width = trigger.innerWidth();","            var height = trigger.innerHeight();","            var offsetTrigger = trigger.offset();","            var offsetElement = element.offset();","            var topOffset = offsetTrigger.top - offsetElement.top;","            var leftOffset = offsetTrigger.left - offsetElement.left;","            var dl = Downloadify.create(element[0], {","              filename: function() {","                return scope.filename;","              },","              data: function() {","                // If there was a click handler in the element Downloadify hides, then trigger it now","                if (scope.clickHandler) trigger.trigger('click');","                return scope.data;","              },","              transparent: true,","              swf: 'swf/downloadify.swf',","              downloadImage: 'img/transparent_l.gif',","              width: width,","              height: height,","              append: true","            });","","            var id = dl.flashContainer.id;","            $('#' + id).css({","              position: 'absolute',","              top: topOffset + 'px',","              left: leftOffset + 'px'","            });","          });","        } else {","          // XXX Should provide some alternative or error","        }","      };","    }","  };","}]);","","/**"," * Tooltips"," */","module.directive('rpTooltip', [function() {","  return function(scope, element, attr) {","    attr.$observe('rpTooltip', function(value) {","      // Title","      var options = {'title': value};","","      // Placement","      if (attr.rpTooltipPlacement)","        options.placement = attr.rpTooltipPlacement;","","      $(element).tooltip('destroy');","      $(element).tooltip(options);","    });","  };","}]);","","/**"," * Popovers"," */","module.directive('rpPopover', [function() {","  return function(scope, element, attr) {","    if (!attr.rpPopoverTrigger) attr.rpPopoverTrigger = 'click';","","    $(element).popover({","      html: true,","      placement: attr.rpPopoverPlacement,","      title: attr.rpPopoverTitle,","      trigger: attr.rpPopoverTrigger","      // TODO also use rpPopoverContent attribute (there's a bug with this)","    });","","    $('html').click(function() {","      $(element).popover('hide');","    });","","    $(element).click(function(event){","      event.stopPropagation();","    });","  };","}]);","","module.directive('rpAutofill', ['$parse', function($parse) {","  return {","    restrict: 'A',","    require: '?ngModel',","    link: function($scope, element, attr, ctrl) {","      if (!ctrl) return;","","      $scope.$watch(attr.rpAutofill, function(value) {","        if (value) {","          // Normalize amount","          if (attr.rpAutofillAmount || attr.rpAutofillCurrency) {","            // 1 XRP will be interpreted as 1 XRP, not 1 base unit","            if (value === (\"\" + parseInt(value, 10))) {","              value = value + '.0';","            }","","            var amount = ripple.Amount.from_json(value);","            if (!amount.is_valid()) return;","            if (attr.rpAutofillAmount) {","              value = +amount.to_human({","                group_sep: false","              });","            } else {","              value = amount.currency().to_json();","            }","          }","","          element.val(value);","          ctrl.$setViewValue(value);","          $scope.$eval(attr.rpAutofillOn);","        }","      }, true);","    }","  };","}]);","","module.directive('rpSelectEl', [function() {","  return {","    restrict: 'A',","    scope: {","      target: '@rpSelectEl'","    },","    link: function($scope, element, attr) {","      element.click(function() {","        var doc = document;","        var text = doc.getElementById($scope.target);","","        if (doc.body.createTextRange) { // ms","          var range = doc.body.createTextRange();","          range.moveToElementText(text);","          range.select();","        } else if (window.getSelection) { // moz, opera, webkit","          var selection = window.getSelection();","          var srange = doc.createRange();","          srange.selectNodeContents(text);","          selection.removeAllRanges();","          selection.addRange(srange);","        }","      });","    }","  };","}]);","","module.directive('rpNoPropagate', [function() {","  return {","    restrict: 'A',","    link: function($scope, element, attr) {","      element.click(function(e) {","        e.stopPropagation();","      });","    }","  };","}]);","","/**"," * Spinner"," */","module.directive('rpSpinner', [function() {","  return {","    restrict: 'A',","    link: function(scope, element, attr) {","      var spinner = null;","      attr.$observe('rpSpinner', function(value) {","        element.removeClass('spinner');","        if (spinner) {","          spinner.stop();","          spinner = null;","        }","","        if (value > 0) {","          spinner = new Spinner({","            lines: 9, // The number of lines to draw","            length: 3, // The length of each line","            width: 2, // The line thickness","            radius: value, // The radius of the inner circle","            className: 'spinnerInner'","          });","","          // Spinner for input field","          if (element.is('input')) {","            element.after('<div class=\"inputSpinner\"></div>');","            spinner.spin(element.parent().find('.inputSpinner')[0]);","          }","","          // Spinner for everything else","          else {","            element.addClass('spinner');","            spinner.spin(element[0]);","          }","        }","      });","    }","  };","}]);","","","// Version 0.2.0","// AngularJS simple file upload directive","// this directive uses an iframe as a target","// to enable the uploading of files without","// losing focus in the ng-app.","//","// <div ng-app=\"app\">","//   <div ng-controller=\"mainCtrl\">","//    <form action=\"/uploads\" ng-upload=\"results()\">","//      <input type=\"file\" name=\"avatar\"></input>","//      <input type=\"submit\" value=\"Upload\"></input>","//    </form>","//  </div>","// </div>","//","//  angular.module('app', ['ngUpload'])","//    .controller('mainCtrl', function($scope) {","//      $scope.results = function(content) {","//        console.log(content);","//      }","//  });","//","//","module.directive('ngUpload', function() {","  return {","    restrict: 'A',","    link: function(scope, element, attrs) {","","      // Options (just 1 for now)","      // Each option should be prefixed with 'upload-Options-' or 'uploadOptions'","      // {","      //    // specify whether to enable the submit button when uploading forms","      //    enableControls: bool","      // }","      var options = {};","      options.enableControls = attrs['uploadOptionsEnableControls'];","","      // get scope function to execute on successful form upload","      if (attrs['ngUpload']) {","","        element.attr(\"target\", \"upload_iframe\");","        element.attr(\"method\", \"post\");","","        // Append a timestamp field to the url to prevent browser caching results","        element.attr(\"action\", element.attr(\"action\") + \"?_t=\" + new Date().getTime());","","        element.attr(\"enctype\", \"multipart/form-data\");","        element.attr(\"encoding\", \"multipart/form-data\");","","        // Retrieve the callback function","        var fn = attrs['ngUpload'].split('(')[0];","        var callbackFn = scope.$eval(fn);","        if (callbackFn === null || callbackFn === undefined || !angular.isFunction(callbackFn)) {","          var message = \"The expression on the ngUpload directive does not point to a valid function.\";","          // console.error(message);","          throw message + \"\\n\";","        }","","        // Helper function to create new iframe for each form submission","        var addNewDisposableIframe = function(submitControl) {","          // create a new iframe","          var iframe = $(\"<iframe id='upload_iframe' name='upload_iframe' border='0' width='0' height='0' style='width: 0px; height: 0px; border: none; display: none' />\");","","          // attach function to load event of the iframe","          iframe.bind('load', function() {","","            // get content - requires jQuery","            var content = iframe.contents().find('body').text();","","            // execute the upload response function in the active scope","            scope.$apply(function() {","              callbackFn(content, content !== \"\" /* upload completed */ );","            });","","            // remove iframe","            if (content !== \"\") // Fixes a bug in Google Chrome that dispose the iframe before content is ready.","            setTimeout(function() {","              iframe.remove();","            }, 250);","","            //if (options.enableControls == null || !(options.enableControls.length >= 0))","            submitControl.attr('disabled', null);","            submitControl.attr('title', 'Click to start upload.');","          });","","          // add the new iframe to application","          element.parent().append(iframe);","        };","","        // 1) get the upload submit control(s) on the form (submitters must be decorated with the 'ng-upload-submit' class)","        // 2) attach a handler to the controls' click event","        $('.upload-submit', element).click(","","        function() {","","          addNewDisposableIframe($(this) /* pass the submit control */ );","","          scope.$apply(function() {","            callbackFn(\"Please wait...\", false /* upload not completed */ );","          });","","          //console.log(angular.toJson(options));","","          var enabled = true;","          if (options.enableControls === null || options.enableControls === undefined || options.enableControls.length >= 0) {","            // disable the submit control on click","            $(this).attr('disabled', 'disabled');","            enabled = false;","          }","","          $(this).attr('title', (enabled ? '[ENABLED]: ' : '[DISABLED]: ') + 'Uploading, please wait...');","","          // submit the form","          $(element).submit();","        }).attr('title', 'Click to start upload.');","      } else console.log(\"No callback function found on the ngUpload directive.\");","    }","  };","});","","/**"," * Focus element on render"," */","module.directive('rpFocus', ['$timeout', function($timeout) {","  return function($scope, element) {","    $timeout(function(){","      $scope.$watch(function () {return element.is(':visible')}, function(newValue) {","        if (newValue === true)","          element.focus();","      })","    })","  }","}]);","","module.directive('rpOffCanvasMenu', function() {","  return {","    restrict: 'A',","    link: function(scope, element, attrs) {","      element.find('h2').click(function () {","        element.parent().toggleClass('off-canvas-nav-expand');","      });","    }","  };","});","","module.directive('rpSnapper', ['rpId', function($id) {","  return function($scope) {","    // Initialize snapper only if user is logged in.","    var watcher = $scope.$watch(function(){return $id.loginStatus}, function(){","      var snapper;","","      if ($id.loginStatus) {","        setImmediate(function(){","          snapper = new Snap({","            element: document.getElementById('wrapper'),","            disable: 'right'","          });","","          // Check","          checkSize();","","          // Snapper toggle button","          $('.snapper-toggle').click(function(){","            snapper.state().state == 'closed' ? snapper.open('left') : snapper.close()","          });","","          $('.mobile-nav').find('a').click(function(){","            snapper.close();","          });","        });","","        // Activate if resized to mobile size","        $(window).resize(function(){","          checkSize();","        });","","        var checkSize = function(){","          // screen-xs-max","          if ('object' === typeof snapper) {","            if ($(window).width() > 767) {","              snapper.close();","              snapper.disable();","            } else {","              $('.mobile-nav').show();","              snapper.enable();","            }","          }","        };","","        // Remove watcher","        watcher();","      }","    });","  }","}]);","","/**"," * Adds spacing around span tags."," */","module.directive('rpSpanSpacing', [function () {","  return {","    restrict: 'EA',","    compile: function (element, attr, linker) {","      element.find('> span').before(' ').after(' ');","    }","  };","}]);"]}]}]]},"ace":{"folds":[],"scrolltop":9060.22236251831,"scrollleft":0,"selection":{"start":{"row":661,"column":0},"end":{"row":661,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":626,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1416451569237}